{"version":3,"sources":["gameHelpers.js","img/bg.png","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","tetrominos","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","Cell","React","memo","Stage","StyledDisplay","gameOver","Display","text","StyledStartButton","button","handleKeyUp","event","preventDefault","StartButton","callback","onClick","onKeyUp","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","calcScore","linePoints","useGameStatus","movePlayer","drop","console","log","dropPlayer","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","keyCode","move","App","className","ReactDOM","render","document","getElementById"],"mappings":"4NAGaA,EAAc,kBACzBC,MAAMC,KAAKD,MAHe,KAGM,kBAC9B,IAAIA,MALmB,IAKAE,KAAK,CAAC,EAAG,cAGvBC,EAAiB,SAACC,EAAQC,EAAT,GAC5B,IADwE,IAAvBC,EAAsB,EAAzBC,EAAaC,EAAY,EAAfC,EAC/CA,EAAI,EAAGA,EAAIL,EAAOM,UAAUC,OAAQF,GAAK,EAChD,IAAK,IAAIF,EAAI,EAAGA,EAAIH,EAAOM,UAAUD,GAAGE,OAAQJ,GAAK,EAEnD,GAA+B,IAA3BH,EAAOM,UAAUD,GAAGF,MAInBF,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,KAEzBH,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,IAGlD,UADFD,EAAMI,EAAIL,EAAOQ,IAAIH,EAAID,GAAOD,EAAIH,EAAOQ,IAAIL,EAAID,GAAO,IAG1D,OAAO,G,cCvBF,MAA0B,+BCI5BO,EAAsBC,IAAOC,IAAV,sJAGVC,GAKTC,EAAeH,IAAOC,IAAV,wQ,mBCZZG,EAAa,CACtBC,EAAI,CAAEC,MAAO,CAAC,CAAC,IAAKC,MAAO,WAE3BC,EAAI,CAAEF,MAAO,CACD,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,GACZ,CAAC,EAAG,IAAK,EAAG,IAEhBC,MAAO,gBAGfE,EAAI,CAAEH,MAAO,CACL,CAAC,EAAI,IAAK,GACV,CAAC,EAAI,IAAK,GACV,CAAC,IAAI,IAAK,IAEdC,MAAO,eAGXG,EAAI,CAAEJ,MAAO,CACL,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAK,GACT,CAAC,EAAG,IAAI,MAEZC,MAAO,gBAEXI,EAAI,CAAEL,MAAO,CACT,CAAC,IAAK,KACN,CAAC,IAAK,MAGVC,MAAO,gBAGPK,EAAI,CAAEN,MAAO,CACT,CAAE,EAAG,IAAI,KACT,CAAC,IAAI,IAAK,GACV,CAAE,EAAI,EAAI,IAEdC,MAAO,eAGPM,EAAI,CAAEP,MAAO,CACT,CAAE,EAAI,EAAI,GACV,CAAC,IAAI,IAAI,KACT,CAAE,EAAG,IAAK,IAEdC,MAAO,gBAGPO,EAAI,CAAER,MAAO,CACT,CAAC,IAAI,IAAK,GACV,CAAE,EAAG,IAAI,KACT,CAAE,EAAI,EAAI,IAEdC,MAAO,gBAIEQ,EAAkB,WAC3B,IAAMC,EAAa,UACbC,EACFD,EAAWE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAWnB,SACrD,OAAOO,EAAWa,IC7DTI,EAAW,SAAC/B,EAAQgC,GAAiB,IAAD,EACrBC,mBAAStC,KADY,mBACxCM,EADwC,KACjCiC,EADiC,OAERD,mBAAS,GAFD,mBAEvCE,EAFuC,KAE1BC,EAF0B,KA8C/C,OA3CAC,qBAAU,WACRD,EAAe,GAEf,IAWME,EAAc,SAAAC,GAElB,IAAMC,EAAWD,EAAUE,KAAI,SAAAC,GAAG,OAChCA,EAAID,KAAI,SAAAE,GAAI,MAAiB,UAAZA,EAAK,GAAiB,CAAC,EAAG,SAAWA,QAexD,OAXA3C,EAAOM,UAAUsC,SAAQ,SAACF,EAAKrC,GAC7BqC,EAAIE,SAAQ,SAACC,EAAO1C,GACJ,IAAV0C,IACFL,EAASnC,EAAIL,EAAOQ,IAAIH,GAAGF,EAAIH,EAAOQ,IAAIL,GAAK,CAC7C0C,EAD6C,UAE1C7C,EAAO8C,SAAW,SAAW,iBAMpC9C,EAAO8C,UACTd,IA9Bc,SAAAQ,GAAQ,OACxBA,EAASO,QAAO,SAACC,EAAKN,GACpB,OAA6C,IAA1CA,EAAIO,WAAU,SAAAN,GAAI,OAAgB,IAAZA,EAAK,OAC5BP,GAAe,SAAAc,GAAI,OAAIA,EAAO,KAC9BF,EAAIG,QAAQ,IAAIvD,MAAM4C,EAAS,GAAGjC,QAAQT,KAAK,CAAC,EAAG,WAC5CkD,IAETA,EAAII,KAAKV,GACFM,KACN,IAsBMK,CAAUb,IAGZA,GAGTN,GAAS,SAAAgB,GAAI,OAAIZ,EAAYY,QAC5B,CAAClD,EAAQgC,IAEL,CAAC/B,EAAOiC,EAAUC,IC/CdmB,EAAc5C,IAAOC,IAAV,+RAGd,SAAA4C,GAAK,OAAIA,EAAMC,UACH,SAAAD,GAAK,OAAIA,EAAME,SAED,SAAAF,GAAK,OAAIA,EAAME,SCNtCC,EAAahD,IAAOC,IAAV,uQAEC,SAAA4C,GAAK,OAAIA,EAAMtC,SACxB,SAAAsC,GAAK,OAAoB,IAAfA,EAAMI,KAAa,YAAc,eACzB,SAAAJ,GAAK,OAAIA,EAAMtC,SAChB,SAAAsC,GAAK,OAAIA,EAAMtC,SACjB,SAAAsC,GAAK,OAAIA,EAAMtC,SACd,SAAAsC,GAAK,OAAIA,EAAMtC,S,OCLxC2C,EAAO,SAAC,GAAD,IAAGD,EAAH,EAAGA,KAAH,OACX,cAACD,EAAD,CAAYC,KAAMA,EAAM1C,MAAOH,EAAW6C,GAAM1C,SAGnC4C,MAAMC,KAAKF,GCGXG,EAND,SAAC,GAAD,IAAG9D,EAAH,EAAGA,MAAH,OACZ,cAACqD,EAAD,CAAaG,MAAOxD,EAAM,GAAGM,OAAQiD,OAAQvD,EAAMM,OAAnD,SACGN,EAAMwC,KAAI,SAAAC,GAAG,OAAIA,EAAID,KAAI,SAACE,EAAMxC,GAAP,OAAa,cAAC,EAAD,CAAcwD,KAAMhB,EAAK,IAAdxC,YCLzC6D,EAAgBtD,IAAOC,IAAV,2WAUb,SAAA4C,GAAK,OAAKA,EAAMU,SAAW,MAAQ,UCLjCC,EAJC,SAAC,GAAD,IAAGD,EAAH,EAAGA,SAAUE,EAAb,EAAaA,KAAb,OACd,cAACH,EAAD,CAAeC,SAAUA,EAAzB,SAAoCE,KCFzBC,EAAoB1D,IAAO2D,OAAV,6VCCxBC,EAAc,SAACC,GACnBA,EAAMC,kBAQOC,EAJK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAChB,cAACN,EAAD,CAAmBO,QAASD,EAAUE,QAASN,EAA/C,2BCgHWO,EAvGA,WAAO,IAAD,EACa5C,mBAAS,MADtB,mBACZ6C,EADY,KACFC,EADE,OAEa9C,oBAAS,GAFtB,mBAEZgC,EAFY,KAEFe,EAFE,OCbI,WAAO,IAAD,EACD/C,mBAAS,CACnCzB,IAAK,CAAEL,EAAG,EAAGE,EAAG,GAChBC,UAAWQ,EAAW,GAAGE,MACzB8B,UAAU,IAJiB,mBACtB9C,EADsB,KACdiF,EADc,KAOvBC,EAAS,SAACC,EAAQC,GAEtB,IAAMC,EAAeF,EAAO1C,KAAI,SAAC6C,EAAGC,GAAJ,OAC9BJ,EAAO1C,KAAI,SAAA+C,GAAG,OAAIA,EAAID,SAGxB,OAAIH,EAAM,EAAUC,EAAa5C,KAAI,SAAAC,GAAG,OAAIA,EAAI+C,aACzCJ,EAAaI,WA6BhBzD,EAAc0D,uBAAY,WAC9BT,EAAU,CACRzE,IAAK,CAAEL,EAAGwF,EAAqBtF,EAAG,GAClCC,UAAWmB,IAAkBT,MAC7B8B,UAAU,MAEX,IAEH,MAAO,CAAC9C,EAhBgB,SAAC,GAAwB,IAAtBG,EAAqB,EAArBA,EAAGE,EAAkB,EAAlBA,EAAGyC,EAAe,EAAfA,SAC/BmC,GAAU,SAAA/B,GAAI,kCACTA,GADS,IAEZ1C,IAAK,CAAEL,EAAI+C,EAAK1C,IAAIL,GAAKA,EAAIE,EAAI6C,EAAK1C,IAAIH,GAAKA,GAC/CyC,iBAY6Bd,EAlCZ,SAAC/B,EAAOmF,GAC3B,IAAMQ,EAAeC,KAAKC,MAAMD,KAAKE,UAAU/F,IAC/C4F,EAAatF,UAAY4E,EAAOU,EAAatF,UAAW8E,GAIxD,IAFA,IAAM5E,EAAMoF,EAAapF,IAAIL,EACzB6F,EAAS,EACPjG,EAAe6F,EAAc3F,EAAO,CAAEE,EAAG,EAAGE,EAAG,KAGnD,GAFAuF,EAAapF,IAAIL,GAAK6F,GACtBA,IAAWA,GAAUA,EAAS,EAAI,GAAK,KAC1BJ,EAAatF,UAAU,GAAGC,OAGrC,OAFA2E,EAAOU,EAAatF,WAAY8E,QAChCQ,EAAapF,IAAIL,EAAIK,GAIzByE,EAAUW,KDfiDK,GAJ1C,mBAIZjG,EAJY,KAIJkG,EAJI,KAIalE,EAJb,KAI0BmE,EAJ1B,OAKoBpE,EAAS/B,EAAQgC,GALrC,mBAKZ/B,EALY,KAKLiC,EALK,OEhBQ,SAAAC,GAAgB,IAAD,EAChBF,mBAAS,GADO,mBACnCmE,EADmC,KAC5BC,EAD4B,OAElBpE,mBAAS,GAFS,mBAEnCqE,EAFmC,KAE7BC,EAF6B,OAGhBtE,mBAAS,GAHO,mBAGnCuE,EAHmC,KAG5BC,EAH4B,KAOpCC,EAAYhB,uBAAY,WAE5B,IAAMiB,EAAa,CAAC,GAAI,IAAK,IAAK,MAE9BxE,EAAc,IAEhBkE,GAAS,SAAAnD,GAAI,OAAIA,EAAOyD,EAAWxE,EAAc,IAAMqE,EAAQ,MAC/DD,GAAQ,SAAArD,GAAI,OAAIA,EAAOf,QAExB,CAACqE,EAAOrE,IAMX,OAJAE,qBAAU,WACRqE,MACC,CAACA,EAAWvE,EAAaiE,IAErB,CAACA,EAAOC,EAAUC,EAAMC,EAASC,EAAOC,GFAWG,CANvC,yBAMZR,EANY,KAMLC,EANK,KAMKC,EANL,KAMWC,EANX,KAMoBC,EANpB,KAM2BC,EAN3B,KASbI,EAAa,SAAAzB,GACZrF,EAAeC,EAAQC,EAAO,CAAEE,EAAGiF,EAAK/E,EAAG,KAC9C6F,EAAgB,CAAE/F,EAAGiF,EAAK/E,EAAG,KAe3ByG,EAAO,WAERR,EAAqB,IAAbE,EAAQ,GAAU,IACzBC,GAAS,SAAAvD,GAAI,OAAIA,EAAO,KAExB6B,EAAY,KAAOyB,EAAQ,GAAK,MAE/BzG,EAAeC,EAAQC,EAAO,CAAEE,EAAG,EAAGE,EAAG,KAIxCL,EAAOQ,IAAIH,EAAI,IACjB0G,QAAQC,IAAI,aACZhC,GAAY,GACZD,EAAY,OAEdmB,EAAgB,CAAE/F,EAAG,EAAGE,EAAG,EAAGyC,UAAU,KARxCoD,EAAgB,CAAE/F,EAAG,EAAGE,EAAG,EAAGyC,UAAU,KAuBtCmE,EAAa,WACjBlC,EAAY,MACZ+B,KAuBF,OGlGK,SAAqBpC,EAAUwC,GACpC,IAAMC,EAAgBC,mBAEtB/E,qBAAU,WACR8E,EAAcE,QAAU3C,IACvB,CAACA,IAGJrC,qBAAU,WAIR,GAAc,OAAV6E,EAAgB,CAClB,IAAMI,EAAKC,aAJb,WACEJ,EAAcE,YAGeH,GAC7B,OAAO,WACLM,cAAcF,OAGjB,CAACJ,IH4EJO,EAAY,WACRX,MACDhC,GAGD,cAACrE,EAAD,CAAqBiH,KAAK,SAASC,SAAS,IAAIC,UAAW,SAAAC,GAAC,OArBjD,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACT7D,IACa,KAAZ6D,EACFjB,GAAY,GACS,KAAZiB,EACTjB,EAAW,GACU,KAAZiB,EACTb,IACqB,KAAZa,EACT3B,EAAalG,EAAO,GACC,KAAZ6H,GACTb,KAU4Dc,CAAKF,IAAIjD,QAtC7D,SAAC,GAAiB,IAAfkD,EAAc,EAAdA,QACX7D,IACiB,KAAZ6D,GAEmB,KAAZA,IADR/C,EAAY,KAAQyB,EAAQ,GAAK,MAmCzC,SACE,eAAC3F,EAAD,WACE,cAAC,EAAD,CAAOZ,MAAOA,IACd,kCACGgE,EACC,cAAC,EAAD,CAASA,SAAUA,EAAUE,KAAK,cAElC,gCACE,cAAC,EAAD,CAASA,KAAI,iBAAYiC,KACzB,cAAC,EAAD,CAASjC,KAAI,gBAAWmC,KACxB,cAAC,EAAD,CAASnC,KAAI,iBAAYqC,QAG7B,cAAC,EAAD,CAAa9B,SAjFH,WAEhBxC,EAASvC,KACToF,EAAY,KACZ/C,IACAgD,GAAY,GACZqB,EAAS,GACTE,EAAQ,GACRE,EAAS,eI9BEuB,G,MAPH,kBACR,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,QCDNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f11b29ac.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () =>\r\n  Array.from(Array(STAGE_HEIGHT), () =>\r\n    new Array(STAGE_WIDTH).fill([0, 'clear']),\r\n  );\r\n\r\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\r\n  for (let y = 0; y < player.tetromino.length; y += 1) {\r\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\r\n      // 1. Check that we're on an actual Tetromino cell\r\n      if (player.tetromino[y][x] !== 0) {\r\n        if (\r\n          // 2. Check that our move is inside the game areas height (y)\r\n          // We shouldn't go through the bottom of the play area\r\n          !stage[y + player.pos.y + moveY] ||\r\n          // 3. Check that our move is inside the game areas width (x)\r\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\r\n          // 4. Check that the cell wer'e moving to isn't set to clear\r\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\r\n            'clear'\r\n        ) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n  }\r\n};","export default __webpack_public_path__ + \"static/media/bg.b47c0fa6.png\";","import styled from 'styled-components'\r\n\r\nimport bgImage from '../../img/bg.png';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background: url(${bgImage}) #000;\r\n    background-size: cover;\r\n    overflow: hidden;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n    display: flex;\r\n    align-items: flex-start;\r\n    padding: 40px;\r\n    margin: 0 auto;\r\n    max-width: 900px;\r\n\r\n    aside {\r\n        width: 100%;\r\n        max-width: 200px;\r\n        display: block;\r\n        padding: 0 20px;\r\n    }\r\n`;","export const TETROMINOS = {\r\n    0 : { shape: [[0]], color: '0, 0, 0'},\r\n\r\n    I : { shape: [\r\n                [0, 'I', 0, 0],\r\n                [0, 'I', 0, 0],\r\n                [0, 'I', 0, 0],\r\n                [0, 'I', 0, 0]\r\n            ],\r\n            color: '80, 227, 230',\r\n    },\r\n\r\n    J : { shape: [\r\n            [0 , 'J', 0 ],\r\n            [0 , 'J', 0 ],\r\n            ['J','J', 0],\r\n        ],\r\n        color: '36, 95, 223',\r\n    },\r\n    \r\n    L : { shape: [\r\n            [0, 'L', 0 ],\r\n            [0, 'L', 0 ],\r\n            [0, 'L','L'],\r\n        ],\r\n        color: '223, 173, 36',\r\n    },\r\n    O : { shape: [\r\n        ['O', 'O'],\r\n        ['O', 'O'],\r\n        \r\n    ],\r\n    color: '223, 217, 36',\r\n    },\r\n\r\n    S : { shape: [\r\n        [ 0 ,'S','S'],\r\n        ['S','S', 0 ],\r\n        [ 0 , 0 , 0 ],\r\n    ],\r\n    color: '48, 211, 56',\r\n    },\r\n\r\n    T : { shape: [\r\n        [ 0 , 0 , 0 ],\r\n        ['T','T','T'],\r\n        [ 0 ,'T', 0 ],\r\n    ],\r\n    color: '132, 61, 198',\r\n    },\r\n\r\n    Z : { shape: [\r\n        ['Z','Z', 0 ],\r\n        [ 0 ,'Z','Z'],\r\n        [ 0 , 0 , 0 ],\r\n    ],\r\n    color: '227, 78, 78',\r\n    },\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = 'IJLOSTZ';\r\n    const randTetromino = \r\n        tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n    return TETROMINOS[randTetromino];\r\n}","import { useState, useEffect } from 'react';\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n  const [stage, setStage] = useState(createStage());\r\n  const [ rowsCleared, setRowsCleared] = useState(0);\r\n  useEffect(() => {\r\n    setRowsCleared(0);\r\n\r\n    const sweepRows = newStage => \r\n      newStage.reduce((ack, row) => {\r\n        if(row.findIndex(cell => cell[0] === 0) === -1) {\r\n          setRowsCleared(prev => prev + 1);\r\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n          return ack\r\n        }\r\n        ack.push(row);\r\n        return ack;\r\n      }, [])\r\n\r\n    const updateStage = prevStage => {\r\n      // First flush the stage\r\n      const newStage = prevStage.map(row =>\r\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\r\n      );\r\n\r\n      // Then draw the tetromino\r\n      player.tetromino.forEach((row, y) => {\r\n        row.forEach((value, x) => {\r\n          if (value !== 0) {\r\n            newStage[y + player.pos.y][x + player.pos.x] = [\r\n              value,\r\n              `${player.collided ? 'merged' : 'clear'}`,\r\n            ];\r\n          }\r\n        });\r\n      });\r\n      // Then check if we collided\r\n      if (player.collided) {\r\n        resetPlayer();\r\n        return sweepRows(newStage);\r\n      }\r\n\r\n      return newStage;\r\n    };\r\n\r\n    setStage(prev => updateStage(prev));\r\n  }, [player, resetPlayer]);\r\n\r\n  return [stage, setStage, rowsCleared];\r\n};","import styled from 'styled-components'\r\n\r\nexport const StyledStage = styled.div`\r\n    display: grid;\r\n    grid-template-rows: repeat(\r\n        ${props => props.height},\r\n        calc(25vw / ${props => props.width})\r\n    );\r\n    grid-template-columns: repeat(${props => props.width}, 1fr);\r\n    grid-gap: 1px;\r\n    border: 2px solid #333;\r\n    width: 100%;\r\n    max-width: 25vw;\r\n    background: #111;\r\n`;","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\n     width: auto;\r\n     background: rgba(${props => props.color}, 0.8); \r\n     border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\r\n     border-bottom-color: rgba(${props => props.color}, 0.1);\r\n     border-right-color: rgba(${props => props.color}, 1);\r\n     border-top-color: rgba(${props => props.color}, 1);\r\n     border-left-color: rgba(${props => props.color}, 0.3);\r\n`","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n  <StyledCell type={type} color={TETROMINOS[type].color} />\r\n)\r\n\r\nexport default React.memo(Cell);","import React from 'react';\r\nimport { StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n  <StyledStage width={stage[0].length} height={stage.length}>\r\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\r\n  </StyledStage>\r\n);\r\n\r\nexport default Stage;","import styled from 'styled-components'\r\n\r\nexport const StyledDisplay = styled.div `\r\n    box-sizing: border-box;\r\n    display: flex;\r\n    align-items: center;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    border: 4px solid #333;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    color: ${props => (props.gameOver ? 'red' : '#999')};\r\n    background: #000;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 0.8rem;\r\n`;","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\nconst Display = ({ gameOver, text }) => (\r\n  <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\n\r\nexport default Display;","import styled from 'styled-components'\r\n\r\nexport const StyledStartButton = styled.button`\r\n    box-sizing: border-box;\r\n    margin: 0 0 20px 0;\r\n    padding: 20px;\r\n    min-height: 30px;\r\n    width: 100%;\r\n    border-radius: 20px;\r\n    border: none;\r\n    color: white;\r\n    background: #333;\r\n    font-family: Pixel, Arial, Helvetica, sans-serif;\r\n    font-size: 1rem;\r\n    outline: none;\r\n    cursor: pointer;\r\n`","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton'\r\n\r\nconst handleKeyUp = (event) => {\r\n  event.preventDefault();\r\n};\r\n\r\n\r\nconst StartButton = ({ callback }) => (\r\n    <StyledStartButton onClick={callback} onKeyUp={handleKeyUp}> Start Game </StyledStartButton>\r\n)\r\n\r\nexport default StartButton;","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus'\r\n\r\n// Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n\r\n  const movePlayer = dir => {\r\n    if (!checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  }\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  }\r\n\r\n  const drop = () => {\r\n    //Increase level when players has cleared 10 rows\r\n    if(rows > (level + 1) * 10 - 1) {\r\n        setLevel(prev => prev + 1);\r\n        //also increase speed\r\n        setDropTime(1000/ (level + 1) + 200);\r\n    }\r\n    if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n      updatePlayerPos({ x: 0, y: 1, collided: false })\r\n    } else {\r\n      // Game Over\r\n      if (player.pos.y < 1) {\r\n        console.log(\"GAME OVER\");\r\n        setGameOver(true);\r\n        setDropTime(null);\r\n      }\r\n      updatePlayerPos({ x: 0, y: 0, collided: true });\r\n    }\r\n  }\r\n  const keyUp = ({ keyCode }) => {\r\n    if(!gameOver) {\r\n        if ( keyCode === 40) {\r\n            setDropTime(1000 / (level + 1) + 200);\r\n        } else if ( keyCode === 32) {\r\n          setDropTime(1000 / (level + 1) + 200);\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null)\r\n    drop();\r\n  }\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) {\r\n        movePlayer(-1);\r\n      } else if (keyCode === 39) {\r\n        movePlayer(1);\r\n      } else if (keyCode === 40) {\r\n        dropPlayer();\r\n      } else if (keyCode === 38) {\r\n        playerRotate(stage, 1);\r\n      } else if (keyCode === 32) {\r\n        dropPlayer();\r\n      }\r\n    }\r\n  }\r\n\r\n  useInterval(() => {\r\n      drop();\r\n  }, dropTime)\r\n\r\n  return (\r\n    <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\r\n      <StyledTetris>\r\n        <Stage stage={stage} />\r\n        <aside>\r\n          {gameOver ? (\r\n            <Display gameOver={gameOver} text=\"Game Over\" />\r\n          ) : (\r\n            <div>\r\n              <Display text={`Score: ${score}`} />\r\n              <Display text={`Rows: ${rows}`} />\r\n              <Display text={`Level: ${level}`} />\r\n            </div>\r\n          )}\r\n          <StartButton callback={startGame} />\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n  const [player, setPlayer] = useState({\r\n    pos: { x: 0, y: 0 },\r\n    tetromino: TETROMINOS[0].shape,\r\n    collided: false,\r\n  });\r\n\r\n  const rotate = (matrix, dir) => {\r\n    // Make the rows to become cols (transpose)\r\n    const rotatedTetro = matrix.map((_, index) =>\r\n      matrix.map(col => col[index]),\r\n    );\r\n    // Reverse each row to get a rotated matrix\r\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n    return rotatedTetro.reverse();\r\n  };\r\n\r\n  const playerRotate = (stage, dir) => {\r\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\r\n\r\n    const pos = clonedPlayer.pos.x;\r\n    let offset = 1;\r\n    while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\r\n      clonedPlayer.pos.x += offset;\r\n      offset = -(offset + (offset > 0 ? 1 : -1));\r\n      if (offset > clonedPlayer.tetromino[0].length) {\r\n        rotate(clonedPlayer.tetromino, -dir);\r\n        clonedPlayer.pos.x = pos;\r\n        return;\r\n      }\r\n    }\r\n    setPlayer(clonedPlayer);\r\n  };\r\n\r\n  const updatePlayerPos = ({ x, y, collided }) => {\r\n    setPlayer(prev => ({\r\n      ...prev,\r\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\r\n      collided,\r\n    }));\r\n  };\r\n\r\n  const resetPlayer = useCallback(() => {\r\n    setPlayer({\r\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\r\n      tetromino: randomTetromino().shape,\r\n      collided: false,\r\n    });\r\n  }, []);\r\n\r\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n};","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n  const [score, setScore] = useState(0);\r\n  const [rows, setRows] = useState(0);\r\n  const [level, setLevel] = useState(0);\r\n\r\n  \r\n\r\n  const calcScore = useCallback(() => {\r\n\r\n    const linePoints = [50, 100, 300, 1200];\r\n    // We have score\r\n    if (rowsCleared > 0) {\r\n      // This is how original Tetris score is calculated\r\n      setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\r\n      setRows(prev => prev + rowsCleared);\r\n    }\r\n  }, [level, rowsCleared]);\r\n\r\n  useEffect(() => {\r\n    calcScore();\r\n  }, [calcScore, rowsCleared, score]);\r\n\r\n  return [score, setScore, rows, setRows, level, setLevel];\r\n};","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris'\nimport './App.css';\n\nconst App = () => (\n    <div className=\"App\">\n      <Tetris />\n    </div>\n  );\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}